/**
 * Copyright (c) 2015-2017 Obeo, Inria
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 	
 * Contributors:
 * - William Piers <william.piers@obeo.fr>
 * - Philippe Merle <philippe.merle@inria.fr>
 * - Faiez Zalila <faiez.zalila@inria.fr>
 */
package org.modmacao.lamp;

import java.util.Map;
import modmacao.Component;

import org.eclipse.cmf.occi.core.MixinBase;
import org.eclipse.emf.common.util.DiagnosticChain;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Tomcat</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see org.modmacao.lamp.LampPackage#getTomcat()
 * @model annotation="http://www.eclipse.org/emf/2002/Ecore constraints='OnlyOneMySQLDependency'"
 * @generated
 */
public interface Tomcat extends Component, MixinBase {

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv OnlyOneMySQLDependency:\n *   let severity : Integer[1] = \'Tomcat::OnlyOneMySQLDependency\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let\n *         result : occi::Boolean[1] = self.entity.oclAsType(occi::Resource)\n *         .links-&gt;select(l |\n *           l.oclIsTypeOf(platform::Componentlink))\n *         -&gt;collect(l | l.parts)\n *         -&gt;select(mb | mb.oclIsTypeOf(Mysqldependency))\n *         -&gt;size() &gt;= 1\n *       in\n *         \'Tomcat::OnlyOneMySQLDependency\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.modmacao.lamp.LampTables%&gt;.STR_Tomcat_c_c_OnlyOneMySQLDependency);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%org.modmacao.lamp.LampTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_result;\n\ttry {\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_occi_c_c_Resource_0 = idResolver.getClass(&lt;%org.modmacao.lamp.LampTables%&gt;.CLSSid_Resource, null);\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.Entity%&gt; entity = this.getEntity();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.cmf.occi.core.Resource%&gt; oclAsType = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%org.eclipse.cmf.occi.core.Resource%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, entity, TYP_occi_c_c_Resource_0));\n\t\tfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%org.eclipse.cmf.occi.core.Link%&gt;&gt; links = oclAsType.getLinks();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_links = idResolver.createOrderedSetOfAll(&lt;%org.modmacao.lamp.LampTables%&gt;.ORD_CLSSid_Link, links);\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt;.Accumulator accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createOrderedSetAccumulatorValue(&lt;%org.modmacao.lamp.LampTables%&gt;.ORD_CLSSid_Link);\n\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_l = BOXED_links.iterator();\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; select_0;\n\t\twhile (true) {\n\t\t\tif (!ITERATOR_l.hasNext()) {\n\t\t\t\tselect_0 = accumulator;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.Link%&gt; l = (&lt;%org.eclipse.cmf.occi.core.Link%&gt;)ITERATOR_l.next();\n\t\t\t/**\n\t\t\t * l.oclIsTypeOf(platform::Componentlink)\n\t\t\t \052/\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_platform_c_c_Componentlink_0 = idResolver.getClass(&lt;%org.modmacao.lamp.LampTables%&gt;.CLSSid_Componentlink, null);\n\t\t\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, l, TYP_platform_c_c_Componentlink_0).booleanValue();\n\t\t\t//\n\t\t\tif (oclIsTypeOf == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\taccumulator.add(l);\n\t\t\t}\n\t\t}\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt;.Accumulator accumulator_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createSequenceAccumulatorValue(&lt;%org.modmacao.lamp.LampTables%&gt;.SEQ_CLSSid_MixinBase);\n\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_l_0 = select_0.iterator();\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt; collect;\n\t\twhile (true) {\n\t\t\tif (!ITERATOR_l_0.hasNext()) {\n\t\t\t\tcollect = accumulator_0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.Link%&gt; l_0 = (&lt;%org.eclipse.cmf.occi.core.Link%&gt;)ITERATOR_l_0.next();\n\t\t\t/**\n\t\t\t * l.parts\n\t\t\t \052/\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%org.eclipse.cmf.occi.core.MixinBase%&gt;&gt; parts = l_0.getParts();\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_parts = idResolver.createOrderedSetOfAll(&lt;%org.modmacao.lamp.LampTables%&gt;.ORD_CLSSid_MixinBase, parts);\n\t\t\t//\n\t\t\tfor (Object value : BOXED_parts.flatten().getElements()) {\n\t\t\t\taccumulator_0.add(value);\n\t\t\t}\n\t\t}\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt;.Accumulator accumulator_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createSequenceAccumulatorValue(&lt;%org.modmacao.lamp.LampTables%&gt;.SEQ_CLSSid_MixinBase);\n\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_mb = collect.iterator();\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt; select;\n\t\twhile (true) {\n\t\t\tif (!ITERATOR_mb.hasNext()) {\n\t\t\t\tselect = accumulator_1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.MixinBase%&gt; mb = (&lt;%org.eclipse.cmf.occi.core.MixinBase%&gt;)ITERATOR_mb.next();\n\t\t\t/**\n\t\t\t * mb.oclIsTypeOf(Mysqldependency)\n\t\t\t \052/\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_lamp_c_c_Mysqldependency = idResolver.getClass(&lt;%org.modmacao.lamp.LampTables%&gt;.CLSSid_Mysqldependency, null);\n\t\t\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf_0 = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, mb, TYP_lamp_c_c_Mysqldependency).booleanValue();\n\t\t\t//\n\t\t\tif (oclIsTypeOf_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\taccumulator_1.add(mb);\n\t\t\t}\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; size = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionSizeOperation%&gt;.INSTANCE.evaluate(select);\n\t\tfinal /*@Thrown\052/ boolean result = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableGreaterThanEqualOperation%&gt;.INSTANCE.evaluate(executor, size, &lt;%org.modmacao.lamp.LampTables%&gt;.INT_1).booleanValue();\n\t\tCAUGHT_result = result;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_result = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%org.modmacao.lamp.LampTables%&gt;.STR_Tomcat_c_c_OnlyOneMySQLDependency, this, (Object)null, diagnostics, context, (Object)null, severity_0, CAUGHT_result, &lt;%org.modmacao.lamp.LampTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
	 * @generated
	 */
	boolean OnlyOneMySQLDependency(DiagnosticChain diagnostics, Map<Object, Object> context);
} // Tomcat
