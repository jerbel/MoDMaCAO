/**
 * Copyright (c) 2015-2017 Obeo, Inria
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 	
 * Contributors:
 * - William Piers <william.piers@obeo.fr>
 * - Philippe Merle <philippe.merle@inria.fr>
 * - Faiez Zalila <faiez.zalila@inria.fr>
 */
package apache_spark;

import java.util.Map;

import org.eclipse.cmf.occi.core.MixinBase;

import org.eclipse.emf.common.util.DiagnosticChain;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Worker</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link apache_spark.Worker#getApacheSparkWorkerCores <em>Apache Spark Worker Cores</em>}</li>
 *   <li>{@link apache_spark.Worker#getApacheSparkWorkerMemory <em>Apache Spark Worker Memory</em>}</li>
 * </ul>
 *
 * @see apache_spark.Apache_sparkPackage#getWorker()
 * @model annotation="http://www.eclipse.org/emf/2002/Ecore constraints='OnlyOneMasterDependency'"
 * @generated
 */
public interface Worker extends Apachesparkcomponent, MixinBase {
	/**
	 * Returns the value of the '<em><b>Apache Spark Worker Cores</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Total CPU cores to allow Spark applications to use on the machine (default: all available)
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Apache Spark Worker Cores</em>' attribute.
	 * @see #setApacheSparkWorkerCores(Integer)
	 * @see apache_spark.Apache_sparkPackage#getWorker_ApacheSparkWorkerCores()
	 * @model dataType="org.eclipse.cmf.occi.infrastructure.Core"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.modmacao.org/apache/spark/ecore!Worker!apacheSparkWorkerCores'"
	 * @generated
	 */
	Integer getApacheSparkWorkerCores();

	/**
	 * Sets the value of the '{@link apache_spark.Worker#getApacheSparkWorkerCores <em>Apache Spark Worker Cores</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Apache Spark Worker Cores</em>' attribute.
	 * @see #getApacheSparkWorkerCores()
	 * @generated
	 */
	void setApacheSparkWorkerCores(Integer value);

	/**
	 * Returns the value of the '<em><b>Apache Spark Worker Memory</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Total amount of memory to allow Spark applications to use on the machine, in a format like 1000M or 2G (default: your machine's total RAM minus 1 GB)
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Apache Spark Worker Memory</em>' attribute.
	 * @see #setApacheSparkWorkerMemory(Float)
	 * @see apache_spark.Apache_sparkPackage#getWorker_ApacheSparkWorkerMemory()
	 * @model dataType="org.eclipse.cmf.occi.infrastructure.GiB"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.modmacao.org/apache/spark/ecore!Worker!apacheSparkWorkerMemory'"
	 * @generated
	 */
	Float getApacheSparkWorkerMemory();

	/**
	 * Sets the value of the '{@link apache_spark.Worker#getApacheSparkWorkerMemory <em>Apache Spark Worker Memory</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Apache Spark Worker Memory</em>' attribute.
	 * @see #getApacheSparkWorkerMemory()
	 * @generated
	 */
	void setApacheSparkWorkerMemory(Float value);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv WorkerMemorySmallerThanComputeMemory:\n *   let\n *     severity : Integer[1] = \'Worker::WorkerMemorySmallerThanComputeMemory\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let result : occi::Boolean[1] = self.apacheSparkWorkerMemory &lt;\n *         self.entity.oclAsType(occi::Resource)\n *         .links-&gt;select(l |\n *           l.oclIsTypeOf(placement::Placementlink))\n *         -&gt;first()\n *         .target.oclAsType(infrastructure::Compute).occiComputeMemory\n *       in\n *         \'Worker::WorkerMemorySmallerThanComputeMemory\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%apache_spark.Apache_sparkTables%&gt;.STR_Worker_c_c_WorkerMemorySmallerThanComputeMemory);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%apache_spark.Apache_sparkTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_result;\n\ttry {\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_infrastructure_c_c_Compute_0 = idResolver.getClass(&lt;%apache_spark.Apache_sparkTables%&gt;.CLSSid_Compute, null);\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_occi_c_c_Resource_0 = idResolver.getClass(&lt;%apache_spark.Apache_sparkTables%&gt;.CLSSid_Resource, null);\n\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.Float%&gt; apacheSparkWorkerMemory = this.getApacheSparkWorkerMemory();\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.RealValue%&gt; BOXED_apacheSparkWorkerMemory = apacheSparkWorkerMemory == null ? null : &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.realValueOf(apacheSparkWorkerMemory);\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.Entity%&gt; entity = this.getEntity();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.cmf.occi.core.Resource%&gt; oclAsType = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%org.eclipse.cmf.occi.core.Resource%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, entity, TYP_occi_c_c_Resource_0));\n\t\tfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%org.eclipse.cmf.occi.core.Link%&gt;&gt; links = oclAsType.getLinks();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_links = idResolver.createOrderedSetOfAll(&lt;%apache_spark.Apache_sparkTables%&gt;.ORD_CLSSid_Link, links);\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt;.Accumulator accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createOrderedSetAccumulatorValue(&lt;%apache_spark.Apache_sparkTables%&gt;.ORD_CLSSid_Link);\n\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_l = BOXED_links.iterator();\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; select;\n\t\twhile (true) {\n\t\t\tif (!ITERATOR_l.hasNext()) {\n\t\t\t\tselect = accumulator;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.Link%&gt; l = (&lt;%org.eclipse.cmf.occi.core.Link%&gt;)ITERATOR_l.next();\n\t\t\t/**\n\t\t\t * l.oclIsTypeOf(placement::Placementlink)\n\t\t\t \052/\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_placement_c_c_Placementlink_0 = idResolver.getClass(&lt;%apache_spark.Apache_sparkTables%&gt;.CLSSid_Placementlink, null);\n\t\t\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, l, TYP_placement_c_c_Placementlink_0).booleanValue();\n\t\t\t//\n\t\t\tif (oclIsTypeOf == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\taccumulator.add(l);\n\t\t\t}\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.cmf.occi.core.Link%&gt; first = (&lt;%org.eclipse.cmf.occi.core.Link%&gt;)&lt;%org.eclipse.ocl.pivot.library.collection.OrderedCollectionFirstOperation%&gt;.INSTANCE.evaluate(select);\n\t\tif (first == null) {\n\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://schemas.ogf.org/occi/core/ecore\\\'::Link::target\\\'\");\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.cmf.occi.core.Resource%&gt; target = first.getTarget();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.cmf.occi.infrastructure.Compute%&gt; oclAsType_0 = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%org.eclipse.cmf.occi.infrastructure.Compute%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, target, TYP_infrastructure_c_c_Compute_0));\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Float%&gt; occiComputeMemory = oclAsType_0.getOcciComputeMemory();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.RealValue%&gt; BOXED_occiComputeMemory = occiComputeMemory == null ? null : &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.realValueOf(occiComputeMemory);\n\t\tfinal /*@Thrown\052/ boolean result = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanOperation%&gt;.INSTANCE.evaluate(executor, BOXED_apacheSparkWorkerMemory, BOXED_occiComputeMemory).booleanValue();\n\t\tCAUGHT_result = result;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_result = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%apache_spark.Apache_sparkTables%&gt;.STR_Worker_c_c_WorkerMemorySmallerThanComputeMemory, this, (Object)null, diagnostics, context, (Object)null, severity_0, CAUGHT_result, &lt;%apache_spark.Apache_sparkTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
	 * @generated
	 */
	boolean WorkerMemorySmallerThanComputeMemory(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv WorkerCoresSmallerThanComputeCores:\n *   let\n *     severity : Integer[1] = \'Worker::WorkerCoresSmallerThanComputeCores\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let result : occi::Boolean[1] = self.apacheSparkWorkerCores &lt;\n *         self.entity.oclAsType(occi::Resource)\n *         .links-&gt;select(l |\n *           l.oclIsTypeOf(placement::Placementlink))\n *         -&gt;first()\n *         .target.oclAsType(infrastructure::Compute).occiComputeCores\n *       in\n *         \'Worker::WorkerCoresSmallerThanComputeCores\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%apache_spark.Apache_sparkTables%&gt;.STR_Worker_c_c_WorkerCoresSmallerThanComputeCores);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%apache_spark.Apache_sparkTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_result;\n\ttry {\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_infrastructure_c_c_Compute = idResolver.getClass(&lt;%apache_spark.Apache_sparkTables%&gt;.CLSSid_Compute, null);\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_occi_c_c_Resource_0 = idResolver.getClass(&lt;%apache_spark.Apache_sparkTables%&gt;.CLSSid_Resource, null);\n\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.Integer%&gt; apacheSparkWorkerCores = this.getApacheSparkWorkerCores();\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; BOXED_apacheSparkWorkerCores = apacheSparkWorkerCores == null ? null : &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.integerValueOf(apacheSparkWorkerCores);\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.Entity%&gt; entity = this.getEntity();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.cmf.occi.core.Resource%&gt; oclAsType = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%org.eclipse.cmf.occi.core.Resource%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, entity, TYP_occi_c_c_Resource_0));\n\t\tfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%org.eclipse.cmf.occi.core.Link%&gt;&gt; links = oclAsType.getLinks();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_links = idResolver.createOrderedSetOfAll(&lt;%apache_spark.Apache_sparkTables%&gt;.ORD_CLSSid_Link, links);\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt;.Accumulator accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createOrderedSetAccumulatorValue(&lt;%apache_spark.Apache_sparkTables%&gt;.ORD_CLSSid_Link);\n\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_l = BOXED_links.iterator();\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; select;\n\t\twhile (true) {\n\t\t\tif (!ITERATOR_l.hasNext()) {\n\t\t\t\tselect = accumulator;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.Link%&gt; l = (&lt;%org.eclipse.cmf.occi.core.Link%&gt;)ITERATOR_l.next();\n\t\t\t/**\n\t\t\t * l.oclIsTypeOf(placement::Placementlink)\n\t\t\t \052/\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_placement_c_c_Placementlink = idResolver.getClass(&lt;%apache_spark.Apache_sparkTables%&gt;.CLSSid_Placementlink, null);\n\t\t\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, l, TYP_placement_c_c_Placementlink).booleanValue();\n\t\t\t//\n\t\t\tif (oclIsTypeOf == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\taccumulator.add(l);\n\t\t\t}\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.cmf.occi.core.Link%&gt; first = (&lt;%org.eclipse.cmf.occi.core.Link%&gt;)&lt;%org.eclipse.ocl.pivot.library.collection.OrderedCollectionFirstOperation%&gt;.INSTANCE.evaluate(select);\n\t\tif (first == null) {\n\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://schemas.ogf.org/occi/core/ecore\\\'::Link::target\\\'\");\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.cmf.occi.core.Resource%&gt; target = first.getTarget();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.cmf.occi.infrastructure.Compute%&gt; oclAsType_0 = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%org.eclipse.cmf.occi.infrastructure.Compute%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, target, TYP_infrastructure_c_c_Compute));\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Integer%&gt; occiComputeCores = oclAsType_0.getOcciComputeCores();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; BOXED_occiComputeCores = occiComputeCores == null ? null : &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.integerValueOf(occiComputeCores);\n\t\tfinal /*@Thrown\052/ boolean result = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanOperation%&gt;.INSTANCE.evaluate(executor, BOXED_apacheSparkWorkerCores, BOXED_occiComputeCores).booleanValue();\n\t\tCAUGHT_result = result;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_result = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%apache_spark.Apache_sparkTables%&gt;.STR_Worker_c_c_WorkerCoresSmallerThanComputeCores, this, (Object)null, diagnostics, context, (Object)null, severity_0, CAUGHT_result, &lt;%apache_spark.Apache_sparkTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
	 * @generated
	 */
	boolean WorkerCoresSmallerThanComputeCores(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv OnlyOneMasterDependency:\n *   let severity : Integer[1] = \'Worker::OnlyOneMasterDependency\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let\n *         result : occi::Boolean[1] = self.entity.oclAsType(occi::Resource)\n *         .links-&gt;select(l |\n *           l.oclIsTypeOf(platform::Componentlink))\n *         -&gt;collect(l | l.parts)\n *         -&gt;select(mb | mb.oclIsTypeOf(Masterdependency))\n *         -&gt;size() = 1\n *       in\n *         \'Worker::OnlyOneMasterDependency\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%apache_spark.Apache_sparkTables%&gt;.STR_Worker_c_c_OnlyOneMasterDependency);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%apache_spark.Apache_sparkTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_result;\n\ttry {\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_occi_c_c_Resource = idResolver.getClass(&lt;%apache_spark.Apache_sparkTables%&gt;.CLSSid_Resource, null);\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.Entity%&gt; entity = this.getEntity();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.cmf.occi.core.Resource%&gt; oclAsType = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%org.eclipse.cmf.occi.core.Resource%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, entity, TYP_occi_c_c_Resource));\n\t\tfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%org.eclipse.cmf.occi.core.Link%&gt;&gt; links = oclAsType.getLinks();\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_links = idResolver.createOrderedSetOfAll(&lt;%apache_spark.Apache_sparkTables%&gt;.ORD_CLSSid_Link, links);\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt;.Accumulator accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createOrderedSetAccumulatorValue(&lt;%apache_spark.Apache_sparkTables%&gt;.ORD_CLSSid_Link);\n\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_l = BOXED_links.iterator();\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; select_0;\n\t\twhile (true) {\n\t\t\tif (!ITERATOR_l.hasNext()) {\n\t\t\t\tselect_0 = accumulator;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.Link%&gt; l = (&lt;%org.eclipse.cmf.occi.core.Link%&gt;)ITERATOR_l.next();\n\t\t\t/**\n\t\t\t * l.oclIsTypeOf(platform::Componentlink)\n\t\t\t \052/\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_platform_c_c_Componentlink = idResolver.getClass(&lt;%apache_spark.Apache_sparkTables%&gt;.CLSSid_Componentlink, null);\n\t\t\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, l, TYP_platform_c_c_Componentlink).booleanValue();\n\t\t\t//\n\t\t\tif (oclIsTypeOf == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\taccumulator.add(l);\n\t\t\t}\n\t\t}\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt;.Accumulator accumulator_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createSequenceAccumulatorValue(&lt;%apache_spark.Apache_sparkTables%&gt;.SEQ_CLSSid_MixinBase);\n\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_l_0 = select_0.iterator();\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt; collect;\n\t\twhile (true) {\n\t\t\tif (!ITERATOR_l_0.hasNext()) {\n\t\t\t\tcollect = accumulator_0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.Link%&gt; l_0 = (&lt;%org.eclipse.cmf.occi.core.Link%&gt;)ITERATOR_l_0.next();\n\t\t\t/**\n\t\t\t * l.parts\n\t\t\t \052/\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%org.eclipse.cmf.occi.core.MixinBase%&gt;&gt; parts = l_0.getParts();\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_parts = idResolver.createOrderedSetOfAll(&lt;%apache_spark.Apache_sparkTables%&gt;.ORD_CLSSid_MixinBase, parts);\n\t\t\t//\n\t\t\tfor (Object value : BOXED_parts.flatten().getElements()) {\n\t\t\t\taccumulator_0.add(value);\n\t\t\t}\n\t\t}\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt;.Accumulator accumulator_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createSequenceAccumulatorValue(&lt;%apache_spark.Apache_sparkTables%&gt;.SEQ_CLSSid_MixinBase);\n\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_mb = collect.iterator();\n\t\t/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt; select;\n\t\twhile (true) {\n\t\t\tif (!ITERATOR_mb.hasNext()) {\n\t\t\t\tselect = accumulator_1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ &lt;%org.eclipse.cmf.occi.core.MixinBase%&gt; mb = (&lt;%org.eclipse.cmf.occi.core.MixinBase%&gt;)ITERATOR_mb.next();\n\t\t\t/**\n\t\t\t * mb.oclIsTypeOf(Masterdependency)\n\t\t\t \052/\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_apache_spark_c_c_Masterdependency = idResolver.getClass(&lt;%apache_spark.Apache_sparkTables%&gt;.CLSSid_Masterdependency, null);\n\t\t\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf_0 = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, mb, TYP_apache_spark_c_c_Masterdependency).booleanValue();\n\t\t\t//\n\t\t\tif (oclIsTypeOf_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\taccumulator_1.add(mb);\n\t\t\t}\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; size = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionSizeOperation%&gt;.INSTANCE.evaluate(select);\n\t\tfinal /*@Thrown\052/ boolean result = size.equals(&lt;%apache_spark.Apache_sparkTables%&gt;.INT_1);\n\t\tCAUGHT_result = result;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_result = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%apache_spark.Apache_sparkTables%&gt;.STR_Worker_c_c_OnlyOneMasterDependency, this, (Object)null, diagnostics, context, (Object)null, severity_0, CAUGHT_result, &lt;%apache_spark.Apache_sparkTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
	 * @generated
	 */
	boolean OnlyOneMasterDependency(DiagnosticChain diagnostics, Map<Object, Object> context);

} // Worker
